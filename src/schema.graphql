type Query {
  me: User!
  users(query: String): [User!]!
  tournaments(query: String): [Tournament!]!
  matches: [Match!]!
  players(query: String): [Player!]!
}

type Mutation {
  login(data: LoginUserInput!): AuthPayload!
  createUser(data: CreateUserInput!): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!
  createTournament(data: CreateTournamentInput!): Tournament!
  deleteTournament(id: ID!): Tournament!
  updateTournament(id: ID!, data: UpdateTournamentInput): Tournament!
  createMatch(data: CreateMatchInput!): Match!
  deleteMatch(id: ID!): Match!
  updateMatch(id: ID!, data: UpdateMatchInput!): Match!
  createPlayer(data: CreatePlayerInput!): Player!
  deletePlayer(id: ID!): Player!
  updatePlayer(id: ID!, data: UpdatePlayerInput!): Player!
}

type Subscription {
  match(tournamentId: ID!): MatchSubscriptionPayload!
  player: PlayerSubscriptionPayload!
  user: UserSubscriptionPayload!
  tournament: TournamentSubscriptionPayload!
}

type AuthPayload {
  user: User!
  token: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
}

input CreateTournamentInput {
  name: String!
}

input UpdateTournamentInput {
  name: String
}

input CreateMatchInput {
  tournament: ID!
  homePlayer: ID!
  awayPlayer: ID!
}

input UpdateMatchInput {
  tournament: ID
  homePlayer: ID
  awayPlayer: ID
  homeScore: Int
  awayScore: Int
}

input CreatePlayerInput {
  name: String!
}

input UpdatePlayerInput {
  name: String
}

type User {
  id: String!
  name: String!
  password: String!
  email: String!
  tournaments: [Tournament!]!
}

type Tournament {
  id: String!
  name: String!
  creator: User!
  matches: [Match!]!
}

type Match {
  id: String!
  tournament: Tournament!
  players: [Player!]!
  homeScore: Int!
  awayScore: Int!
}

type Player {
  id: String!
  name: String!
  matches: [Match!]!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
}

type TournamentSubscriptionPayload {
  mutation: MutationType!
  node: Tournament
}

type MatchSubscriptionPayload {
  mutation: MutationType!
  node: Match
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
}
